apiVersion: apps/v1
kind: Deployment
metadata:
  name: sre-demo-app
  labels:
    app: sre-demo-app
    version: v1.3.0
    tier: production
    security.hardened: "true"
    cost.optimized: "true"
    disaster-recovery: "enabled"
  annotations:
    deployment.kubernetes.io/revision: "1"
    security.scan.status: "passed"
    cost.optimization.level: "aggressive"
    backup.policy: "daily"
spec:
  replicas: 3  # Production minimum
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: sre-demo-app
  template:
    metadata:
      labels:
        app: sre-demo-app
        version: v1.3.0
        tier: production
        security.hardened: "true"
        cost.optimized: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        backup.policy: "daily"
    spec:
      # Security hardening
      serviceAccountName: sre-demo-serviceaccount
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      
      # Cost optimization
      priorityClassName: cost-optimized
      nodeSelector:
        cost-optimized: "true"
      tolerations:
      - key: spot-instance
        operator: Equal
        value: "true"
        effect: NoSchedule
      
      # Anti-affinity for production resilience
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - sre-demo-app
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            preference:
              matchExpressions:
              - key: node.kubernetes.io/instance-type
                operator: In
                values:
                - e2-standard-2
                - n2-standard-2
      
      containers:
      - name: sre-demo-app
        image: gcr.io/PROJECT_ID/sre-demo-app:production-hardened
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        
        # Production environment variables
        env:
        - name: FLASK_ENV
          value: "production"
        - name: LOG_FORMAT
          value: "json"
        - name: LOG_LEVEL
          value: "INFO"
        - name: APP_VERSION
          value: "1.3.0"
        - name: SECURITY_HARDENED
          value: "true"
        - name: COST_OPTIMIZED
          value: "true"
        - name: REGION
          value: "us-central1"
        - name: BACKUP_ENABLED
          value: "true"
        - name: APP_NAME
          valueFrom:
            configMapKeyRef:
              name: sre-demo-config
              key: app.name
        
        # Production resource configuration
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
            ephemeral-storage: "100Mi"
          limits:
            memory: "256Mi"
            cpu: "500m"
            ephemeral-storage: "200Mi"
        
        # Production health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
            httpHeaders:
            - name: X-Health-Check
              value: liveness
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
            scheme: HTTP
            httpHeaders:
            - name: X-Health-Check
              value: readiness
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        # Startup probe for production reliability
        startupProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        
        # Production security context
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        
        # Volume mounts for production
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: secrets-volume
          mountPath: /app/secrets
          readOnly: true
      
      # Production volumes
      volumes:
      - name: tmp-volume
        emptyDir:
          sizeLimit: "100Mi"
      - name: cache-volume
        emptyDir:
          sizeLimit: "50Mi"
      - name: config-volume
        configMap:
          name: sre-demo-config
          defaultMode: 0444
      - name: secrets-volume
        secret:
          secretName: sre-demo-secrets
          defaultMode: 0400
      
      # Production deployment constraints
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      
      # Image pull policy for production
      imagePullSecrets:
      - name: gcr-json-key

---
# Production service configuration
apiVersion: v1
kind: Service
metadata:
  name: sre-demo-service
  labels:
    app: sre-demo-app
    tier: production
    security.hardened: "true"
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
    cloud.google.com/load-balancer-type: External
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:region:account:certificate/cert-id"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
spec:
  type: LoadBalancer
  loadBalancerSourceRanges:
  - 0.0.0.0/0  # Production: Configure specific IP ranges
  ports:
  - port: 443
    targetPort: 8080
    protocol: TCP
    name: https
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: sre-demo-app
  sessionAffinity: None
  externalTrafficPolicy: Local  # Better for production observability

---
# Production ingress with TLS
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sre-demo-ingress
  labels:
    tier: production
    security.hardened: "true"
  annotations:
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.global-static-ip-name: "sre-demo-production-ip"
    networking.gke.io/managed-certificates: "sre-demo-ssl-cert"
    kubernetes.io/ingress.allow-http: "false"
spec:
  tls:
  - hosts:
    - sre-demo-production.company.com
    secretName: sre-demo-tls-secret
  rules:
  - host: sre-demo-production.company.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sre-demo-service
            port:
              number: 80

---
# Managed SSL certificate
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: sre-demo-ssl-cert
  labels:
    tier: production
    security.hardened: "true"
spec:
  domains:
  - sre-demo-production.company.com