name: Build and Push Container Image

on:
  push:
    branches: [ main, 'exercise*' ]  # Support main and exercise* branches
    paths: 
      - 'exercises/exercise2/**'
      - '.github/workflows/build-and-push.yml'
  pull_request:
    branches: [ main ]
    paths: 
      - 'exercises/exercise2/**'

env:
  REGISTRY: us-central1-docker.pkg.dev
  REPOSITORY_NAME: sre-demo-app
  IMAGE_NAME: sre-demo-app
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  test-application:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        cd exercises/exercise2
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install testing and linting tools
      run: |
        pip install flake8 bandit pytest psutil
        
    - name: Lint Python code
      run: |
        cd exercises/exercise2
        flake8 app/ --max-line-length=88 --ignore=E203,W503 --exclude=__pycache__
        
    - name: Run security analysis
      run: |
        cd exercises/exercise2
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ || true
        
    - name: Test application startup and health
      run: |
        cd exercises/exercise2
        # Start application in background
        python -m app.main &
        APP_PID=$!
        echo "Started application with PID: $APP_PID"
        
        # Wait for application to start
        sleep 5
        
        # Test health endpoint
        if curl -f http://localhost:8080/health; then
          echo "Health check passed"
        else
          echo "Health check failed"
          kill $APP_PID 2>/dev/null || true
          exit 1
        fi
        
        # Test main endpoint
        if curl -f http://localhost:8080/; then
          echo "Main endpoint test passed"
        else
          echo "Main endpoint test failed"
          kill $APP_PID 2>/dev/null || true
          exit 1
        fi
        
        # Clean up
        kill $APP_PID 2>/dev/null || true
        echo "Application tests completed successfully"

  build-and-push:
    needs: test-application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Configure Docker to use gcloud as credential helper
      run: gcloud auth configure-docker us-central1-docker.pkg.dev
      
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: exercises/exercise2
        file: exercises/exercise2/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        
    - name: Install Trivy security scanner
      run: |
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
    - name: Run Trivy vulnerability scanner
      run: |
        # Get the first tag from the metadata for scanning
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "Scanning image: $IMAGE_TAG"
        
        # Run security scan - exit code 1 will fail pipeline for HIGH/CRITICAL vulnerabilities
        trivy image --exit-code 1 --severity HIGH,CRITICAL --format table "$IMAGE_TAG"
        
        # Also generate JSON report for archival (but don't fail on this)
        trivy image --exit-code 0 --severity HIGH,CRITICAL --format json -o trivy-report.json "$IMAGE_TAG" || true
          
    - name: Display image information
      run: |
        echo "Container image successfully built and pushed:"
        echo "Registry: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}"
        echo "Tags built:"
        echo "${{ steps.meta.outputs.tags }}"
        echo ""
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit SHA: ${{ github.sha }}"
        echo ""
        echo "To pull this image:"
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "docker pull $IMAGE_TAG"
        echo ""
        echo "To run this image:"
        echo "docker run -p 8080:8080 $IMAGE_TAG"